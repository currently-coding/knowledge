/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WeekPlannerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/file.ts
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));

// src/date.ts
var DATE_FORMAT = "YYYY-MM-DD";
var DAYS_TO_NUMBER = /* @__PURE__ */ new Map([
  ["sun", 0],
  ["mon", 1],
  ["tue", 2],
  ["wed", 3],
  ["thu", 4],
  ["fri", 5],
  ["sat", 6]
]);
function isWorkingDay(date, workingDays) {
  if (workingDays === void 0) {
    return date.getDay() > 0 && date.getDay() < 6;
  }
  const allowedDays = mapToNumbersArray(workingDays);
  return allowedDays.contains(date.getDay());
}
function getWeekday(date) {
  const weekday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  return weekday[date.getDay()];
}
function getCalendarWeek(m) {
  return m.isoWeek();
}
function allDaysValid(days) {
  return days.every(function(d) {
    return DAYS_TO_NUMBER.get(d.toLowerCase().trim()) != void 0;
  });
}
function dateString(m) {
  return m.format("YYYY-MM-DD");
}
function mapToNumbersArray(workingDays) {
  const days = [];
  workingDays.split(",").forEach((d) => {
    const day = DAYS_TO_NUMBER.get(d.toLowerCase().trim());
    if (day != void 0) {
      days.push(day);
    }
  });
  return days;
}

// src/file.ts
var WeekPlannerFile = class {
  constructor(settings, vault, fullFileName) {
    this.settings = settings;
    this.vault = vault;
    this.fullFileName = fullFileName;
  }
  async deleteLine(line, s, editor) {
    const from = { line, ch: 0 };
    let delta = 0;
    if (line < editor.lastLine()) {
      delta = path.sep.length;
    }
    const to = { line, ch: s.length + delta };
    editor.replaceRange("", from, to);
  }
  async insertAt(line, at) {
    const filecontents = await this.getFileContents();
    if (filecontents == void 0) {
      console.log("could not read file");
      return;
    }
    const todos = filecontents.split("\n");
    todos.splice(at, 0, line);
    await this.updateFile(todos.join("\n"));
  }
  async getFileContents() {
    return await this.vault.adapter.read(this.fullFileName);
  }
  async updateFile(fileContents) {
    try {
      return await this.vault.adapter.write(this.fullFileName, fileContents);
    } catch (error) {
      console.log(error);
    }
  }
  async createIfNotExists(vault, workspace, header) {
    const fileExists = await vault.adapter.exists(this.fullFileName);
    if (!fileExists) {
      await this.ensureDirectories();
      await vault.create(this.fullFileName, "## " + header);
    }
  }
  async createIfNotExistsAndOpen(vault, workspace, header) {
    await this.createIfNotExists(vault, workspace, header);
    await workspace.openLinkText(this.obsidianFile(this.fullFileName), "", false);
  }
  obsidianFile(filename) {
    return filename.replace(".md", "");
  }
  isInbox() {
    return this.fullFileName == getInboxFileName(this.settings);
  }
  isYesterday() {
    const d = getYesterdayDate();
    return this.fullFileName.endsWith(dateString((0, import_obsidian.moment)(d)) + "-" + getWeekday(d) + ".md");
  }
  async ensureDirectories() {
    const directories = this.fullFileName.split("/");
    let directoryPath = "";
    for (let i = 0; i < directories.length - 1; i++) {
      directoryPath = directoryPath + directories[i] + "/";
      console.log("dir path:" + directoryPath);
      try {
        const normalizedPath = (0, import_obsidian.normalizePath)(directoryPath);
        const folderExists = await this.vault.adapter.exists(normalizedPath, false);
        if (!folderExists) {
          await this.vault.createFolder(normalizedPath);
        }
      } catch (error) {
        console.log(error);
      }
    }
  }
};
function extendFileName(settings, filename) {
  if (filename == "Inbox.md") {
    return settings.baseDir + "/Inbox.md";
  } else {
    return settings.baseDir + "/" + settings.daysDir + "/" + filename;
  }
}
function getInboxFileName(settings) {
  return settings.baseDir + "/Inbox.md";
}
function getDayFileName(settings, date) {
  return settings.baseDir + "/" + settings.daysDir + "/" + dateString((0, import_obsidian.moment)(date)) + "-" + getWeekday(date) + ".md";
}
function getDateFromFilename(filename) {
  if (filename == void 0 || filename == "") {
    return (0, import_obsidian.moment)();
  }
  const parts = filename.split("/");
  if (parts.length == 0) {
    return (0, import_obsidian.moment)();
  }
  const dateString2 = parts[parts.length - 1];
  const withoutWeekday = dateString2.substring(0, dateString2.lastIndexOf("-"));
  return (0, import_obsidian.moment)(withoutWeekday, DATE_FORMAT).set({ hour: 0, minute: 0, second: 0, millisecond: 0 });
}
function getWeekFileName(settings, m) {
  const year = m.year();
  return settings.baseDir + "/" + settings.weeksDir + "/Calweek-" + year + "-" + getCalendarWeek(m) + ".md";
}
function getNextWorkingDay(workingDays) {
  let today = new Date();
  while (!isWorkingDay(today, workingDays)) {
    today.setDate(today.getDate() + 1);
  }
  return today;
}
function getTomorrowDate(workingDays, date) {
  let today = date !== void 0 ? date : (0, import_obsidian.moment)();
  let tomorrow = today.add(1, "days");
  while (!isWorkingDay(tomorrow.toDate(), workingDays)) {
    tomorrow = (0, import_obsidian.moment)(tomorrow).add(1, "days");
  }
  return tomorrow.toDate();
}
function getYesterdayDate() {
  const date = new Date();
  date.setDate(date.getDate() - 1);
  while (!isWorkingDay(date)) {
    date.setDate(date.getDate() - 1);
  }
  return date;
}
function isValidWorkingDaysString(value) {
  if (value == void 0 || value.trim() == "") {
    console.log("working day string undefined or empty");
    return false;
  }
  return allDaysValid(value.split(","));
}

// src/constants.ts
var WEEK_PLANNER_BASE_DIR = "Week Planner";
var WEEK_PLANNER_DAYS_DIR = "Days";
var WEEK_WEEK_DIR = "Weeks";
var TODO_PREFIX = "- [ ] ";
var TODO_DONE_PREFIX = "- [x] ";

// src/todo-modal.ts
var import_obsidian3 = require("obsidian");

// node_modules/svelte/internal/index.mjs
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
  return function(event) {
    event.preventDefault();
    return fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value === null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function select_option(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
  select.selectedIndex = -1;
}
function select_value(select) {
  const selected_option = select.querySelector(":checked") || select.options[0];
  return selected_option && selected_option.__value;
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var outroing = /* @__PURE__ */ new Set();
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function mount_component(component, target, anchor, customElement) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      if (!is_function(callback)) {
        return noop;
      }
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};

// src/ui/edit-todo.svelte
var import_obsidian2 = require("obsidian");
function create_fragment(ctx) {
  let form;
  let div2;
  let label0;
  let t1;
  let input0;
  let t2;
  let hr0;
  let t3;
  let div0;
  let label1;
  let t5;
  let select;
  let option0;
  let option1;
  let option2;
  let t9;
  let hr1;
  let t10;
  let div1;
  let label2;
  let t12;
  let input1;
  let t13;
  let small;
  let t15;
  let hr2;
  let t16;
  let div3;
  let button;
  let t17;
  let mounted;
  let dispose;
  return {
    c() {
      form = element("form");
      div2 = element("div");
      label0 = element("label");
      label0.textContent = "Description";
      t1 = space();
      input0 = element("input");
      t2 = space();
      hr0 = element("hr");
      t3 = space();
      div0 = element("div");
      label1 = element("label");
      label1.textContent = "Target List";
      t5 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = "Inbox";
      option1 = element("option");
      option1.textContent = "Tomorrow";
      option2 = element("option");
      option2.textContent = "Specific date";
      t9 = space();
      hr1 = element("hr");
      t10 = space();
      div1 = element("div");
      label2 = element("label");
      label2.textContent = "Target Date";
      t12 = space();
      input1 = element("input");
      t13 = space();
      small = element("small");
      small.textContent = "Only considered for target list 'Specific date'";
      t15 = space();
      hr2 = element("hr");
      t16 = space();
      div3 = element("div");
      button = element("button");
      t17 = text(ctx[0]);
      attr(label0, "for", "description");
      attr(label0, "class", "label");
      set_style(label0, "display", "inline-block");
      set_style(label0, "width", "100px");
      attr(input0, "id", "description");
      attr(input0, "type", "text");
      set_style(input0, "width", "70%");
      input0.required = true;
      attr(input0, "placeholder", "Short description of your task");
      attr(label1, "for", "target-list");
      set_style(label1, "display", "inline-block");
      set_style(label1, "width", "100px");
      option0.__value = "inbox";
      option0.value = option0.__value;
      option1.__value = "tomorrow";
      option1.value = option1.__value;
      option2.__value = "target-date";
      option2.value = option2.__value;
      attr(select, "id", "target-list");
      if (ctx[2].list === void 0)
        add_render_callback(() => ctx[8].call(select));
      set_style(label2, "display", "inline-block");
      set_style(label2, "width", "100px");
      attr(label2, "for", "target-date");
      attr(input1, "type", "date");
      attr(input1, "id", "target-date");
      attr(input1, "name", "target-date");
      set_style(small, "margin-left", "8px");
      attr(button, "type", "submit");
      attr(button, "class", "mod-cta");
    },
    m(target, anchor) {
      insert(target, form, anchor);
      append(form, div2);
      append(div2, label0);
      append(div2, t1);
      append(div2, input0);
      set_input_value(input0, ctx[2].description);
      ctx[7](input0);
      append(div2, t2);
      append(div2, hr0);
      append(div2, t3);
      append(div2, div0);
      append(div0, label1);
      append(div0, t5);
      append(div0, select);
      append(select, option0);
      append(select, option1);
      append(select, option2);
      select_option(select, ctx[2].list);
      append(div2, t9);
      append(div2, hr1);
      append(div2, t10);
      append(div2, div1);
      append(div1, label2);
      append(div1, t12);
      append(div1, input1);
      set_input_value(input1, ctx[2].targetDate);
      append(div1, t13);
      append(div1, small);
      append(form, t15);
      append(form, hr2);
      append(form, t16);
      append(form, div3);
      append(div3, button);
      append(button, t17);
      if (!mounted) {
        dispose = [
          listen(input0, "input", ctx[6]),
          listen(select, "change", ctx[8]),
          listen(input1, "input", ctx[9]),
          listen(form, "submit", prevent_default(ctx[3]))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 4 && input0.value !== ctx2[2].description) {
        set_input_value(input0, ctx2[2].description);
      }
      if (dirty & 4) {
        select_option(select, ctx2[2].list);
      }
      if (dirty & 4) {
        set_input_value(input1, ctx2[2].targetDate);
      }
      if (dirty & 1)
        set_data(t17, ctx2[0]);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(form);
      ctx[7](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { onSubmit } = $$props;
  let { task } = $$props;
  let { buttonLabel } = $$props;
  let descriptionInput;
  let todo = {
    description: task,
    list: "inbox",
    targetDate: (0, import_obsidian2.moment)().format(DATE_FORMAT)
  };
  onMount(() => {
    setTimeout(() => {
      descriptionInput.focus();
    }, 10);
  });
  const _onSubmit = () => {
    onSubmit(todo.description.trim(), todo.list, (0, import_obsidian2.moment)(todo.targetDate).toDate());
  };
  function input0_input_handler() {
    todo.description = this.value;
    $$invalidate(2, todo);
  }
  function input0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      descriptionInput = $$value;
      $$invalidate(1, descriptionInput);
    });
  }
  function select_change_handler() {
    todo.list = select_value(this);
    $$invalidate(2, todo);
  }
  function input1_input_handler() {
    todo.targetDate = this.value;
    $$invalidate(2, todo);
  }
  $$self.$$set = ($$props2) => {
    if ("onSubmit" in $$props2)
      $$invalidate(4, onSubmit = $$props2.onSubmit);
    if ("task" in $$props2)
      $$invalidate(5, task = $$props2.task);
    if ("buttonLabel" in $$props2)
      $$invalidate(0, buttonLabel = $$props2.buttonLabel);
  };
  return [
    buttonLabel,
    descriptionInput,
    todo,
    _onSubmit,
    onSubmit,
    task,
    input0_input_handler,
    input0_binding,
    select_change_handler,
    input1_input_handler
  ];
}
var Edit_todo = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { onSubmit: 4, task: 5, buttonLabel: 0 });
  }
};
var edit_todo_default = Edit_todo;

// src/todo-modal.ts
var TodoModal = class extends import_obsidian3.Modal {
  constructor(app, title, buttonLabel, task, onSubmit) {
    super(app);
    this.task = task;
    this.title = title;
    this.buttonLabel = buttonLabel;
    this.onSubmit = (description, list, date) => {
      onSubmit(description, list, date);
      this.close();
    };
  }
  onOpen() {
    this.titleEl.setText(this.title);
    const { contentEl } = this;
    new edit_todo_default({
      target: contentEl,
      props: { task: this.task, buttonLabel: this.buttonLabel, onSubmit: this.onSubmit }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  workingDays: "Mon,Tue,Wed,Thu,Fri",
  baseDir: WEEK_PLANNER_BASE_DIR,
  daysDir: WEEK_PLANNER_DAYS_DIR,
  weeksDir: WEEK_WEEK_DIR
};

// main.ts
var WeekPlannerPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "add-todo",
      name: "Add Todo",
      callback: () => {
        new TodoModal(this.app, "Create Task", "Create", "", (task, list, date) => {
          if (list == "inbox") {
            this.insertIntoInbox(TODO_PREFIX + task);
          } else if (list == "tomorrow") {
            this.insertIntoTomorrow(TODO_PREFIX + task);
          } else if (list == "target-date") {
            this.insertIntoTargetDate(date, TODO_PREFIX + task);
          }
        }).open();
      }
    });
    this.addCommand({
      id: "week-planner-inbox",
      name: "Show Inbox",
      callback: () => this.createInbox(),
      hotkeys: []
    });
    this.addCommand({
      id: "week-planner-week",
      name: "Show Week",
      callback: () => this.createWeek(),
      hotkeys: []
    });
    this.addCommand({
      id: "week-planner-today",
      name: "Show Today",
      callback: () => this.createToday(),
      hotkeys: []
    });
    this.addCommand({
      id: "week-planner-yesterday",
      name: "Show Yesterday",
      callback: () => this.createYesterday(),
      hotkeys: []
    });
    this.addCommand({
      id: "week-planner-tomorrow",
      name: "Show Tomorrow",
      callback: () => this.createTomorrow(),
      hotkeys: []
    });
    this.addCommand({
      id: "move-task",
      name: "Move Task",
      editorCallback: (editor) => {
        this.moveTask(editor);
      }
    });
    this.addCommand({
      id: "move-to-inbox",
      name: "Move to Inbox",
      editorCallback: (editor) => {
        this.moveTaskToInbox(editor);
      }
    });
    this.addCommand({
      id: "move-anywhere",
      name: "Move anywhere",
      editorCallback: (editor) => {
        this.moveAnywhere(editor);
      }
    });
    this.addSettingTab(new WeekPlannerSettingTab(this.app, this));
  }
  async insertIntoTargetDate(date, todo) {
    let today = new WeekPlannerFile(this.settings, this.app.vault, getDayFileName(this.settings, date));
    await today.createIfNotExists(this.app.vault, this.app.workspace, "Inbox");
    await today.insertAt(todo, 1);
  }
  async insertIntoInbox(todo) {
    let inbox = new WeekPlannerFile(this.settings, this.app.vault, getInboxFileName(this.settings));
    await inbox.createIfNotExists(this.app.vault, this.app.workspace, "Inbox");
    await inbox.insertAt(todo, 1);
  }
  async insertIntoTomorrow(todo) {
    let tomorrow = getTomorrowDate(this.settings.workingDays);
    let dest = new WeekPlannerFile(this.settings, this.app.vault, getDayFileName(this.settings, tomorrow));
    await dest.createIfNotExists(this.app.vault, this.app.workspace, "Inbox");
    await dest.insertAt(todo, 1);
  }
  async createInbox() {
    let file = new WeekPlannerFile(this.settings, this.app.vault, getInboxFileName(this.settings));
    await file.createIfNotExistsAndOpen(this.app.vault, this.app.workspace, "Inbox");
  }
  async createWeek() {
    const m = (0, import_obsidian4.moment)();
    let weekFile = new WeekPlannerFile(this.settings, this.app.vault, getWeekFileName(this.settings, m));
    await weekFile.createIfNotExistsAndOpen(this.app.vault, this.app.workspace, "Goals of Week " + getCalendarWeek(m));
  }
  async createToday() {
    let date = new Date();
    let file = new WeekPlannerFile(this.settings, this.app.vault, getDayFileName(this.settings, date));
    await file.createIfNotExistsAndOpen(this.app.vault, this.app.workspace, "Inbox");
  }
  async createTomorrow() {
    let date = getTomorrowDate(this.settings.workingDays);
    let file = new WeekPlannerFile(this.settings, this.app.vault, getDayFileName(this.settings, date));
    await file.createIfNotExistsAndOpen(this.app.vault, this.app.workspace, "Inbox");
  }
  async createYesterday() {
    let date = getYesterdayDate();
    let file = new WeekPlannerFile(this.settings, this.app.vault, getDayFileName(this.settings, date));
    await file.createIfNotExistsAndOpen(this.app.vault, this.app.workspace, "Inbox");
  }
  async moveTask(editor) {
    var _a;
    let sourceFileName = extendFileName(this.settings, (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.name);
    let source = new WeekPlannerFile(this.settings, this.app.vault, sourceFileName);
    let destFileName;
    if (source.isInbox() || source.isYesterday()) {
      destFileName = getDayFileName(this.settings, getNextWorkingDay(this.settings.workingDays));
    } else {
      let dateFromFilename = getDateFromFilename(source.fullFileName);
      destFileName = getDayFileName(this.settings, getTomorrowDate(this.settings.workingDays, dateFromFilename));
    }
    let dest = new WeekPlannerFile(this.settings, this.app.vault, destFileName);
    await this.move(editor, source, dest, "Inbox");
  }
  async move(editor, source, dest, header) {
    await dest.createIfNotExists(this.app.vault, this.app.workspace, header);
    const line = editor.getCursor().line;
    let todo = editor.getLine(line);
    if (todo.startsWith(TODO_PREFIX) || todo.startsWith(TODO_DONE_PREFIX)) {
      await dest.insertAt(todo, 1);
      await source.deleteLine(line, todo, editor);
    }
  }
  async moveTaskToInbox(editor) {
    var _a;
    let sourceFileName = extendFileName(this.settings, (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.name);
    let source = new WeekPlannerFile(this.settings, this.app.vault, sourceFileName);
    let dest = new WeekPlannerFile(this.settings, this.app.vault, getInboxFileName(this.settings));
    await this.move(editor, source, dest, "Inbox");
  }
  async moveAnywhere(editor) {
    const line = editor.getCursor().line;
    let todo = editor.getLine(line);
    if (todo.startsWith(TODO_PREFIX) || todo.startsWith(TODO_DONE_PREFIX)) {
      todo = todo.substring(TODO_PREFIX.length, todo.length);
      new TodoModal(this.app, "Move Task", "Move", todo, (task, list, date) => {
        var _a;
        const sourceFileName = extendFileName(this.settings, (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.name);
        const source = new WeekPlannerFile(this.settings, this.app.vault, sourceFileName);
        if (list == "inbox") {
          this.moveTaskToInbox(editor);
        } else if (list == "tomorrow") {
          const tomorrow = getTomorrowDate(this.settings.workingDays);
          const dest = new WeekPlannerFile(this.settings, this.app.vault, getDayFileName(this.settings, tomorrow));
          this.move(editor, source, dest, "Inbox");
        } else if (list == "target-date") {
          const dest = new WeekPlannerFile(this.settings, this.app.vault, getDayFileName(this.settings, date));
          this.move(editor, source, dest, "Inbox");
        }
      }).open();
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var WeekPlannerSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings forWeek Planner plugin." });
    new import_obsidian4.Setting(containerEl).setName("Working Days").setDesc("Weekdays that should be considered when stepping between days or shifting tasks to the next working day. Format: Mon,Tue,Wed,Thu,Fri,Sat,Sun").addText((text2) => text2.setPlaceholder("Mon,Tue,Wed,Thu,Fri").setValue(this.plugin.settings.workingDays).onChange(async (value) => {
      value = validateOrDefault(value);
      this.plugin.settings.workingDays = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Base directory").setDesc("Week planner's root directory. Will be created if if doesn't exists.").addText((text2) => text2.setPlaceholder("Week Planner").setValue(this.plugin.settings.baseDir).onChange(async (value) => {
      value = validateDirectoryOrDefault(value, DEFAULT_SETTINGS.baseDir).trim();
      this.plugin.settings.baseDir = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Days directory").setDesc("Subdirectory of base where daily todo files are stored. Will be created if if doesn't exists.").addText((text2) => text2.setPlaceholder("Days").setValue(this.plugin.settings.daysDir).onChange(async (value) => {
      value = validateDirectoryOrDefault(value, DEFAULT_SETTINGS.daysDir).trim();
      this.plugin.settings.daysDir = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Weeks directory").setDesc("Subdirectory of base where weekly files are stored. Will be created if if doesn't exists.").addText((text2) => text2.setPlaceholder("Weeks").setValue(this.plugin.settings.weeksDir).onChange(async (value) => {
      value = validateDirectoryOrDefault(value, DEFAULT_SETTINGS.weeksDir).trim();
      this.plugin.settings.weeksDir = value;
      await this.plugin.saveSettings();
    }));
    const div = containerEl.createEl("div", {
      cls: "advanced-tables-donation"
    });
    const donateText = document.createElement("p");
    donateText.appendText("If this plugin adds value for you and you would like to help support continued development, please use the button below:");
    div.appendChild(donateText);
    const parser = new DOMParser();
    div.appendChild(createDonateButton("https://paypal.me/ralfwirdemann", parser.parseFromString(paypal, "text/xml").documentElement));
  }
};
function validateOrDefault(value) {
  if (isValidWorkingDaysString(value)) {
    console.log("working day string is valid");
    return value;
  }
  console.log("working day string is invalid. using default");
  return DEFAULT_SETTINGS.workingDays;
}
function validateDirectoryOrDefault(value, defaultValue) {
  if (value === void 0 || value === "") {
    console.log("directory is invalid. using default");
    return defaultValue;
  }
  if (value.contains(":") || value.contains("/") || value.contains("\\")) {
    console.log("directory contains invalid character");
    return defaultValue;
  }
  return value;
}
var createDonateButton = (link, img) => {
  const a = document.createElement("a");
  a.setAttribute("href", link);
  a.addClass("advanced-tables-donate-button");
  a.appendChild(img);
  return a;
};
var paypal = `
<svg xmlns="http://www.w3.org/2000/svg" width="150" height="40">
<path fill="#253B80" d="M46.211 6.749h-6.839a.95.95 0 0 0-.939.802l-2.766 17.537a.57.57 0 0 0 .564.658h3.265a.95.95 0 0 0 .939-.803l.746-4.73a.95.95 0 0 1 .938-.803h2.165c4.505 0 7.105-2.18 7.784-6.5.306-1.89.013-3.375-.872-4.415-.972-1.142-2.696-1.746-4.985-1.746zM47 13.154c-.374 2.454-2.249 2.454-4.062 2.454h-1.032l.724-4.583a.57.57 0 0 1 .563-.481h.473c1.235 0 2.4 0 3.002.704.359.42.469 1.044.332 1.906zM66.654 13.075h-3.275a.57.57 0 0 0-.563.481l-.145.916-.229-.332c-.709-1.029-2.29-1.373-3.868-1.373-3.619 0-6.71 2.741-7.312 6.586-.313 1.918.132 3.752 1.22 5.031.998 1.176 2.426 1.666 4.125 1.666 2.916 0 4.533-1.875 4.533-1.875l-.146.91a.57.57 0 0 0 .562.66h2.95a.95.95 0 0 0 .939-.803l1.77-11.209a.568.568 0 0 0-.561-.658zm-4.565 6.374c-.316 1.871-1.801 3.127-3.695 3.127-.951 0-1.711-.305-2.199-.883-.484-.574-.668-1.391-.514-2.301.295-1.855 1.805-3.152 3.67-3.152.93 0 1.686.309 2.184.892.499.589.697 1.411.554 2.317zM84.096 13.075h-3.291a.954.954 0 0 0-.787.417l-4.539 6.686-1.924-6.425a.953.953 0 0 0-.912-.678h-3.234a.57.57 0 0 0-.541.754l3.625 10.638-3.408 4.811a.57.57 0 0 0 .465.9h3.287a.949.949 0 0 0 .781-.408l10.946-15.8a.57.57 0 0 0-.468-.895z"/>
<path fill="#179BD7" d="M94.992 6.749h-6.84a.95.95 0 0 0-.938.802l-2.766 17.537a.569.569 0 0 0 .562.658h3.51a.665.665 0 0 0 .656-.562l.785-4.971a.95.95 0 0 1 .938-.803h2.164c4.506 0 7.105-2.18 7.785-6.5.307-1.89.012-3.375-.873-4.415-.971-1.142-2.694-1.746-4.983-1.746zm.789 6.405c-.373 2.454-2.248 2.454-4.062 2.454h-1.031l.725-4.583a.568.568 0 0 1 .562-.481h.473c1.234 0 2.4 0 3.002.704.359.42.468 1.044.331 1.906zM115.434 13.075h-3.273a.567.567 0 0 0-.562.481l-.145.916-.23-.332c-.709-1.029-2.289-1.373-3.867-1.373-3.619 0-6.709 2.741-7.311 6.586-.312 1.918.131 3.752 1.219 5.031 1 1.176 2.426 1.666 4.125 1.666 2.916 0 4.533-1.875 4.533-1.875l-.146.91a.57.57 0 0 0 .564.66h2.949a.95.95 0 0 0 .938-.803l1.771-11.209a.571.571 0 0 0-.565-.658zm-4.565 6.374c-.314 1.871-1.801 3.127-3.695 3.127-.949 0-1.711-.305-2.199-.883-.484-.574-.666-1.391-.514-2.301.297-1.855 1.805-3.152 3.67-3.152.93 0 1.686.309 2.184.892.501.589.699 1.411.554 2.317zM119.295 7.23l-2.807 17.858a.569.569 0 0 0 .562.658h2.822c.469 0 .867-.34.939-.803l2.768-17.536a.57.57 0 0 0-.562-.659h-3.16a.571.571 0 0 0-.562.482z"/>
<path fill="#253B80" d="M7.266 29.154l.523-3.322-1.165-.027H1.061L4.927 1.292a.316.316 0 0 1 .314-.268h9.38c3.114 0 5.263.648 6.385 1.927.526.6.861 1.227 1.023 1.917.17.724.173 1.589.007 2.644l-.012.077v.676l.526.298a3.69 3.69 0 0 1 1.065.812c.45.513.741 1.165.864 1.938.127.795.085 1.741-.123 2.812-.24 1.232-.628 2.305-1.152 3.183a6.547 6.547 0 0 1-1.825 2c-.696.494-1.523.869-2.458 1.109-.906.236-1.939.355-3.072.355h-.73c-.522 0-1.029.188-1.427.525a2.21 2.21 0 0 0-.744 1.328l-.055.299-.924 5.855-.042.215c-.011.068-.03.102-.058.125a.155.155 0 0 1-.096.035H7.266z"/>
<path fill="#179BD7" d="M23.048 7.667c-.028.179-.06.362-.096.55-1.237 6.351-5.469 8.545-10.874 8.545H9.326c-.661 0-1.218.48-1.321 1.132L6.596 26.83l-.399 2.533a.704.704 0 0 0 .695.814h4.881c.578 0 1.069-.42 1.16-.99l.048-.248.919-5.832.059-.32c.09-.572.582-.992 1.16-.992h.73c4.729 0 8.431-1.92 9.513-7.476.452-2.321.218-4.259-.978-5.622a4.667 4.667 0 0 0-1.336-1.03z"/>
<path fill="#222D65" d="M21.754 7.151a9.757 9.757 0 0 0-1.203-.267 15.284 15.284 0 0 0-2.426-.177h-7.352a1.172 1.172 0 0 0-1.159.992L8.05 17.605l-.045.289a1.336 1.336 0 0 1 1.321-1.132h2.752c5.405 0 9.637-2.195 10.874-8.545.037-.188.068-.371.096-.55a6.594 6.594 0 0 0-1.017-.429 9.045 9.045 0 0 0-.277-.087z"/>
<path fill="#253B80" d="M9.614 7.699a1.169 1.169 0 0 1 1.159-.991h7.352c.871 0 1.684.057 2.426.177a9.757 9.757 0 0 1 1.481.353c.365.121.704.264 1.017.429.368-2.347-.003-3.945-1.272-5.392C20.378.682 17.853 0 14.622 0h-9.38c-.66 0-1.223.48-1.325 1.133L.01 25.898a.806.806 0 0 0 .795.932h5.791l1.454-9.225 1.564-9.906z"/>
</svg>`;


/* nosourcemap */