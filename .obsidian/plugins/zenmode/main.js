/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ZenMode
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ZenMode = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    // refresh function for when we change settings
    this.refresh = () => {
      this.updateStyle();
      this.setSidebarVisibility();
      this.setButtonVisibility();
    };
    // update the styles (at the start, or as the result of a settings change)
    this.updateStyle = () => {
      document.body.classList.toggle("zenmode-active", this.settings.zenMode);
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ZenModeSettingTab(this.app, this));
    this.addCommand({
      id: "toggle-zen-mode",
      name: "Toggle",
      callback: () => {
        this.settings.zenMode = !this.settings.zenMode;
        this.saveData(this.settings);
        this.refresh();
      }
    });
    this.addRibbonIcon("expand", "Toggle Zen Mode", async () => {
      this.settings.zenMode = !this.settings.zenMode;
      this.saveData(this.settings);
      this.refresh();
    });
    this.refresh();
  }
  onunload() {
    console.log("Unloading Zen Mode plugin");
  }
  async loadSettings() {
    this.settings = Object.assign(DEFAULT_SETTINGS, await this.loadData());
  }
  createButton() {
    this.buttonContainer = document.createElement("div");
    this.buttonContainer.classList.add("zenmode-button");
    this.button = new import_obsidian.ButtonComponent(this.buttonContainer);
    this.button.setIcon("shrink");
    this.button.onClick(() => {
      this.settings.zenMode = !this.settings.zenMode;
      this.saveSettings();
      this.refresh();
    });
    document.body.appendChild(this.buttonContainer);
  }
  setButtonVisibility() {
    if (this.settings.zenMode) {
      if (!this.hasButton) {
        this.createButton();
        this.hasButton = true;
      }
      this.buttonContainer.style.display = "block";
    } else {
      if (this.hasButton) {
        this.buttonContainer.style.display = "none";
      }
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  setSidebarVisibility() {
    const app = this.app;
    if (app.workspace.leftSplit == void 0 || app.workspace.rightSplit == void 0) {
      return;
    }
    if (!this.settings.zenMode) {
      if (!this.settings.leftSidebar) {
        app.workspace.leftSplit.expand();
      }
      if (!this.settings.rightSidebar) {
        app.workspace.rightSplit.expand();
      }
    } else {
      this.settings.rightSidebar = this.app.workspace.rightSplit.collapsed;
      this.settings.leftSidebar = this.app.workspace.leftSplit.collapsed;
      if (app.workspace.leftSplit.collapsed != this.settings.zenMode) {
        app.workspace.leftSplit.collapse();
      }
      if (app.workspace.rightSplit.collapsed != this.settings.zenMode) {
        app.workspace.rightSplit.collapse();
      }
    }
  }
};
var DEFAULT_SETTINGS = {
  zenMode: false,
  leftSidebar: false,
  rightSidebar: false
};
var ZenModeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Enable Zen Mode").setDesc("Hide most UI elements").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.zenMode).onChange((value) => {
        this.plugin.settings.zenMode = value;
        this.plugin.saveData(this.plugin.settings);
        this.plugin.refresh();
      })
    );
  }
};

/* nosourcemap */